source("http://bioconductor.org/biocLite.R")
biocLite()
#Habilita o pacote quantmod
library(quantmod)
library(matlab)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados dos ativos
ativos<-c("AAPL","GLD","GOOG","XOM")
getSymbols(ativos, src="yahoo",from=startDate,to=endDate)
#print (ativos)
#Usa o comando head para mostrar as seis primeiras observações
#head(AAPL)
print (AAPL[,6])
print (dailyReturn(AAPL[,6]))
library (stockPortfolio)
library(quantmod)
library(matlab)
library (stockPortfolio)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados dos ativos
ativos<-c("AAPL","GLD","GOOG","XOM")
getSymbols(ativos, src="yahoo",from=startDate,to=endDate)
#print (ativos)
#Usa o comando head para mostrar as seis primeiras observações
#head(AAPL)
print (AAPL[,6])
print (dailyReturn(AAPL[,6]))
# without the need of any additional package.
#
# Written by Fotis Papailias & Dimitrios Thomakos on Dec. 31, 2011
# Contact Details: papailias@quantf.com<script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script>
#                  dimitrios.thomakos@gmail.com<script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script>, thomakos@quantf.com<script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script>
#
# All material is provided for use as is, with no guarrantees, either expressed or implied.
# Copyright (C) under the authors' names Papailias, Fotis and Thomakos, Dimitrios for both
#
#-------------------------------------------------------------------------#
#             Quantitative Finance & Technical Trading                    #
#                     http://www.quantf.com                               #
#-------------------------------------------------------------------------#
#
# PLEASE MAINTAIN THIS HEADER IN ALL COPIES OF THIS FILE THAT YOU USE
###############################################################################################
# Main Function
#
# Input
# -----
#   tickers (text strings)
#   start.date (dates)
#   end.date (dates)
#
# Output
# -------
# 6 Double Matrices: Open, High, Low, Close, Volume, Adj. Close
###############################################################################################
data.loading <- function(tickers, start.date, end.date)
{
# Change the locale
sl <- Sys.setlocale(locale="US")
# Create the universe of dates
all.dates <- seq(as.Date(start.date), as.Date(end.date), by="day")
all.dates <- subset(all.dates,weekdays(all.dates) != "Sunday" & weekdays(all.dates) != "Saturday")
all.dates.char <- as.matrix(as.character(all.dates))
# Create sparse matrices
open <- matrix(NA, NROW(all.dates.char), length(tickers))
hi <- open
low <- open
close <- open
volume <- open
adj.close <- open
# Name the rows correctly
rownames(open) <- all.dates.char
rownames(hi) <- all.dates.char
rownames(low) <- all.dates.char
rownames(close) <- all.dates.char
rownames(volume) <- all.dates.char
rownames(adj.close) <- all.dates.char
# Split the start and end dates to be used in the ULR later on
splt <- unlist(strsplit(start.date, "-"))
a <- as.character(as.numeric(splt[2])-1)
b <- splt[3]
c <- splt[1]
splt <- unlist(strsplit(end.date, "-"))
d <- as.character(as.numeric(splt[2])-1)
e <- splt[3]
f <- splt[1]
# Create the two out of the three basic components for the URL loading
str1 <- "http://ichart.finance.yahoo.com/table.csv?s="
str3 <- paste("&a=", a, "&b=", b, "&c=", c, "&d=", d, "&e=", e, "&f=", f, "&g=d&ignore=.csv", sep="")
# Main loop for all assets
for (i in seq(1,length(tickers),1))
{
str2 <- tickers[i]
strx <- paste(str1,str2,str3,sep="")
x <- read.csv(strx)
datess <- as.matrix(x[1])
replacing <- match(datess, all.dates.char)
open[replacing,i] <- as.matrix(x[2])
hi[replacing,i] <- as.matrix(x[3])
low[replacing,i] <- as.matrix(x[4])
close[replacing,i] <- as.matrix(x[5])
volume[replacing,i] <- as.matrix(x[6])
adj.close[replacing,i] <- as.matrix(x[7])
}
# Name the cols correctly
colnames(open) <- tickers
colnames(hi) <- tickers
colnames(low) <- tickers
colnames(close) <- tickers
colnames(volume) <- tickers
colnames(adj.close) <- tickers
# Return the ouput
return(list(open=open, high=hi, low=low, close=close, volume=volume, adj.close=adj.close))
}
}
}
}
data.loading <- function(tickers, start.date, end.date)
{
# Change the locale
sl <- Sys.setlocale(locale="US")
# Create the universe of dates
all.dates <- seq(as.Date(start.date), as.Date(end.date), by="day")
all.dates <- subset(all.dates,weekdays(all.dates) != "Sunday" & weekdays(all.dates) != "Saturday")
all.dates.char <- as.matrix(as.character(all.dates))
# Create sparse matrices
open <- matrix(NA, NROW(all.dates.char), length(tickers))
hi <- open
low <- open
close <- open
volume <- open
adj.close <- open
# Name the rows correctly
rownames(open) <- all.dates.char
rownames(hi) <- all.dates.char
rownames(low) <- all.dates.char
rownames(close) <- all.dates.char
rownames(volume) <- all.dates.char
rownames(adj.close) <- all.dates.char
# Split the start and end dates to be used in the ULR later on
splt <- unlist(strsplit(start.date, "-"))
a <- as.character(as.numeric(splt[2])-1)
b <- splt[3]
c <- splt[1]
splt <- unlist(strsplit(end.date, "-"))
d <- as.character(as.numeric(splt[2])-1)
e <- splt[3]
f <- splt[1]
# Create the two out of the three basic components for the URL loading
str1 <- "http://ichart.finance.yahoo.com/table.csv?s="
str3 <- paste("&a=", a, "&b=", b, "&c=", c, "&d=", d, "&e=", e, "&f=", f, "&g=d&ignore=.csv", sep="")
# Main loop for all assets
for (i in seq(1,length(tickers),1))
{
str2 <- tickers[i]
strx <- paste(str1,str2,str3,sep="")
x <- read.csv(strx)
datess <- as.matrix(x[1])
replacing <- match(datess, all.dates.char)
open[replacing,i] <- as.matrix(x[2])
hi[replacing,i] <- as.matrix(x[3])
low[replacing,i] <- as.matrix(x[4])
close[replacing,i] <- as.matrix(x[5])
volume[replacing,i] <- as.matrix(x[6])
adj.close[replacing,i] <- as.matrix(x[7])
}
# Name the cols correctly
colnames(open) <- tickers
colnames(hi) <- tickers
colnames(low) <- tickers
colnames(close) <- tickers
colnames(volume) <- tickers
colnames(adj.close) <- tickers
# Return the ouput
return(list(open=open, high=hi, low=low, close=close, volume=volume, adj.close=adj.close))
}
{
# Change the locale
sl <- Sys.setlocale(locale="US")
# Create the universe of dates
all.dates <- seq(as.Date(start.date), as.Date(end.date), by="day")
all.dates <- subset(all.dates,weekdays(all.dates) != "Sunday" & weekdays(all.dates) != "Saturday")
all.dates.char <- as.matrix(as.character(all.dates))
# Create sparse matrices
open <- matrix(NA, NROW(all.dates.char), length(tickers))
hi <- open
low <- open
close <- open
volume <- open
adj.close <- open
# Name the rows correctly
rownames(open) <- all.dates.char
rownames(hi) <- all.dates.char
rownames(low) <- all.dates.char
rownames(close) <- all.dates.char
rownames(volume) <- all.dates.char
rownames(adj.close) <- all.dates.char
# Split the start and end dates to be used in the ULR later on
splt <- unlist(strsplit(start.date, "-"))
a <- as.character(as.numeric(splt[2])-1)
b <- splt[3]
c <- splt[1]
splt <- unlist(strsplit(end.date, "-"))
d <- as.character(as.numeric(splt[2])-1)
e <- splt[3]
f <- splt[1]
# Create the two out of the three basic components for the URL loading
str1 <- "http://ichart.finance.yahoo.com/table.csv?s="
str3 <- paste("&a=", a, "&b=", b, "&c=", c, "&d=", d, "&e=", e, "&f=", f, "&g=d&ignore=.csv", sep="")
# Main loop for all assets
for (i in seq(1,length(tickers),1))
{
str2 <- tickers[i]
strx <- paste(str1,str2,str3,sep="")
x <- read.csv(strx)
datess <- as.matrix(x[1])
replacing <- match(datess, all.dates.char)
open[replacing,i] <- as.matrix(x[2])
hi[replacing,i] <- as.matrix(x[3])
low[replacing,i] <- as.matrix(x[4])
close[replacing,i] <- as.matrix(x[5])
volume[replacing,i] <- as.matrix(x[6])
adj.close[replacing,i] <- as.matrix(x[7])
}
# Name the cols correctly
colnames(open) <- tickers
colnames(hi) <- tickers
colnames(low) <- tickers
colnames(close) <- tickers
colnames(volume) <- tickers
colnames(adj.close) <- tickers
# Return the ouput
return(list(open=open, high=hi, low=low, close=close, volume=volume, adj.close=adj.close))
open
open
return
return
volume
open
high
fix(data.loading)
fix(data.loading)
fix(data.loading)
print (AAPL[,6])
print (dailyReturn(AAPL[,6]))
library(quantmod)
library(matlab)
library (stockPortfolio)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados dos ativos
ativos<-c("AAPL","GLD","GOOG","XOM")
getSymbols(ativos, src="yahoo",from=startDate,to=endDate)
#print (ativos)
#Usa o comando head para mostrar as seis primeiras observações
#head(AAPL)
print (AAPL[,6])
print (dailyReturn(AAPL[,6]))
print (ativos)
#Habilita o pacote quantmod
library(quantmod)
library(matlab)
library (stockPortfolio)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados dos ativos
ativos<-c("AAPL","GLD","GOOG","XOM")
getSymbols(ativos, src="yahoo",from=startDate,to=endDate)
print (ativos)
#Usa o comando head para mostrar as seis primeiras observações
#head(AAPL)
#print (AAPL[,6])
#print (dailyReturn(AAPL[,6]))
#Habilita o pacote quantmod
library(quantmod)
library(matlab)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados dos ativos
ativos<-c("AAPL","GLD","GOOG","XOM")
getSymbols(ativos, src="yahoo",from=startDate,to=endDate)
print (ativos)
#Usa o comando head para mostrar as seis primeiras observações
#head(AAPL)
#print (AAPL[,6])
#print (dailyReturn(AAPL[,6]))
ativos
#Habilita o pacote quantmod
library(quantmod)
library(matlab)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2011-01-01")
endDate = as.Date("2011-12-31")
#Obtêm os dados dos ativos
ativos<-c("AAPL","GLD","GOOG","XOM")
getSymbols(ativos, src="yahoo",from=startDate,to=endDate)
print (ativos)
#Usa o comando head para mostrar as seis primeiras observações
#head(AAPL)
#print (AAPL[,6])
#print (dailyReturn(AAPL[,6]))
print (GOOG[,6])
library(quantmod)
library(matlab)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2010-01-01")
endDate = as.Date("2010-12-31")
#Obtêm os dados dos ativos
ativos<-c("AAPL","GLD","GOOG","XOM")
getSymbols(ativos, src="yahoo",from=startDate,to=endDate)
#print (ativos)
#Usa o comando head para mostrar as seis primeiras observações
#head(AAPL)
print (GOOG[,6])
#print (dailyReturn(AAPL[,6]))
rollmean{GOOG[,6], 20}
rollmean(GOOG[,6], 20)
runSD(GOOG[,6],n=20)
BBands(GOOG[,6], n = 20, sd = 1)
x = (GOOG[,6]-rollmean(GOOG[,6], 20))/runSD(GOOG[,6],n=20)
x
BBands(AAPL[,6], n = 20)
BBands(AAPL[,6], n = 20, sd = 2)
BBands(AAPL[,6], n = 20, sd = 1)
print (GOOG[,6])
print (GOOG[,5])
print (GOOG[,4])
BBands(GOOG[,4], n = 20, sd = 1)
BBands(AAPL[,4], n = 20, sd = 1)
BBands(MSFT[,4], n = 20, sd = 1)
ativos<-c("AAPL","GLD","GOOG","MSFT")
getSymbols(ativos, src="yahoo",from=startDate,to=endDate)
#print (ativos)
#Usa o comando head para mostrar as seis primeiras observações
#head(AAPL)
print (GOOG[,4])
#print (dailyReturn(AAPL[,6]))
#Rolling Mean
rollmean(GOOG[,6], 20)
#Rolling STD
runSD(GOOG[,6],n=20)
#Bollinger Bands
BBands(MSFT[,4], n = 20, sd = 1)
BBands(MSFT[,4], n = 20, sd = 1)
x = (AAPL[,4]-rollmean(AAPL[,4], 20)/runSD(AAPL[,4],n=20)
x
(AAPL[,4]-rollmean(AAPL[,4], 20)/runSD(AAPL[,4],n=20)
rollmean(GOOG[,6], 20)
library(quantmod)
library(matlab)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2010-01-01")
endDate = as.Date("2010-12-31")
#Obtêm os dados dos ativos
ativos<-c("AAPL","GLD","GOOG","MSFT")
getSymbols(ativos, src="yahoo",from=startDate,to=endDate)
#print (ativos)
#Usa o comando head para mostrar as seis primeiras observações
#head(AAPL)
print (GOOG[,4])
#print (dailyReturn(AAPL[,6]))
#Rolling Mean
rollmean(GOOG[,6], 20)
#Rolling STD
runSD(GOOG[,6],n=20)
#Bollinger Bands
BBands(MSFT[,4], n = 20, sd = 1)
BBands(AAPL[,4], n = 20, sd = 1)
(AAPL[,4]-rollmean(AAPL[,4], 20)/runSD(AAPL[,4],n=20)
x=(AAPL[,4]-rollmean(AAPL[,4], 20)/runSD(AAPL[,4],n=20)
a = rollmean(GOOG[,6], 20)
print (a)
b = runSD(GOOG[,6],n=20)
print (b)
BBands(MSFT[,4], n = 20, sd = 1)
#Habilita o pacote quantmod
library(quantmod)
library(matlab)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2000-01-01")
endDate = as.Date("2010-12-31")
#Obtêm os dados dos ativos
ativos<-c("AAPL")
getSymbols(ativos, src="yahoo",from=startDate,to=endDate)
#print (ativos)
#Usa o comando head para mostrar as seis primeiras observações
#head(AAPL)
ativos
AAPL[4]
AAPL[,4]
AAAPL
AAPL
#Habilita o pacote quantmod
library(quantmod)
library(matlab)
#Cria um novo ambiente para armazenar os dados
stockData <- new.env()
#Especifica as datas de interesse
startDate = as.Date("2000-01-01")
endDate = as.Date("2010-12-31")
#Obtêm os dados dos ativos
ativos<-c("AAPL")
getSymbols(ativos, src="yahoo",from=startDate,to=endDate)
#print (ativos)
AAPL
max.print (AAPL)
install.packages("tseries")
write.table(AAPL,file="Myfile.csv",sep=",",row.names=F)
date
as.Date()
getDates(dates, src:yahoo,from=startDate,to=endDate)
write.table(AAPL,file="Myfile.csv",sep=",",row.names=F)
getDates(dates, src:yahoo,from=startDate,to=endDate)
getDate(dates, src:yahoo,from=startDate,to=endDate)
startDate
date in startDate to endDate
AAPL[-1]
as.Date(AAPL)
date(AAPL)
is.date(AAPL)
is.date(date.AAPL)
print.date(AAPL)
library(tseries)
library(tseries)
SBUX.z = get.hist.quote(instrument="sbux", start="1993-03-01",
+ end="2008-03-01", quote="AdjClose",
+ provider="yahoo", origin="1970-01-01",
+ compression="d", retclass="zoo")
library(tseries)
SBUX.z = get.hist.quote(instrument="sbux", start="1993-03-01", end="2008-03-01", quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
SBUX
SBUX.z
write.table(SBUX.z, file="Myfile.csv", sep=",")
write.table(SBUX.z, file="Myfile.csv", sep=",", row.names=F)
write.table(SBUX.z,file="Myfile.csv",sep=",",row.names=F)
setwd("~/Desktop/Computational Investment")
write.table(SBUX.z,file="Myfile.csv",sep=",",row.names=F)
date(SBUX.z)
index(AAPL)
cbind(index(AAPL), AAPL)
merge(index(AAPL),AAPL)
x = merge(index(AAPL),AAPL)
write.table(x, file="xTeste.csv", sep=",")
